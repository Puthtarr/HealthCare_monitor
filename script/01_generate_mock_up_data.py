# 01_generate_mock_up_data.py

import os
import sys
import json
import random
import numpy as np
import pandas as pd
from faker import Faker
from datetime import datetime, timedelta


''' ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 31 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2566 ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 17 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 
‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå
‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: 1,392,229 ‡∏Ñ‡∏ô (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 31 ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏° 2566 ‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á)
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: 17 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: 1,392,229 ‡∏Ñ‡∏ô √∑ 17 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 81,896 ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ 

min 35,496
max 217,140 '''

# districts = [
#     "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ä‡∏∏‡∏°‡∏û‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡πà‡∏≤‡∏ï‡∏π‡∏°", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏à‡∏≠‡∏°‡∏û‡∏£‡∏∞", 
#     "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏Å‡∏≤‡∏ö‡πÄ‡∏ä‡∏¥‡∏á", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏£‡∏±‡∏ï‡∏ô‡∏ö‡∏∏‡∏£‡∏µ", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏ô‡∏°",
#     "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏®‡∏µ‡∏Ç‡∏£‡∏†‡∏π‡∏°‡∏¥", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏á‡∏Ç‡∏∞", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏•‡∏≥‡∏î‡∏ß‡∏ô", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏≥‡πÇ‡∏£‡∏á‡∏ó‡∏≤‡∏ö", 
#     "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ö‡∏±‡∏ß‡πÄ‡∏ä‡∏î", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏û‡∏ô‡∏°‡∏î‡∏á‡∏£‡∏±‡∏Å", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏®‡∏£‡∏µ‡∏ì‡∏£‡∏á‡∏Ñ‡πå", 
#     "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏Ç‡∏ß‡∏≤‡∏™‡∏¥‡∏ô‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÇ‡∏ô‡∏ô‡∏ô‡∏≤‡∏£‡∏≤‡∏¢‡∏ì‡πå"
# ]

fake = Faker("th_TH")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ 2 ‡πÅ‡∏´‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£
districts = [
    ("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå", 0.65),
    ("‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏à‡∏≠‡∏°‡∏û‡∏£‡∏∞", 0.35)
]

# utility functions
def random_date(start, end):
    return start + timedelta(days=random.randint(0, (end - start).days))

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° cache ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≥
names_male = [fake.name_male() for _ in range(5000)]
names_female = [fake.name_female() for _ in range(5000)]

# Settings
NUM_PEOPLE = 100_000
BATCH_SIZE = 10_000   # Batch for reduce memory

person_records = []
health_records = []

os.makedirs("output_json", exist_ok=True)
print("...Generating mock data...")

for i in range(1, NUM_PEOPLE + 1):
    pid = 100000 + i
    gender = random.choice(["male", "female"])
    name = random.choice(names_male) if gender == "male" else random.choice(names_female)
    first, last = name.split(" ")[0], name.split(" ")[-1]
    birth = random_date(datetime(1960, 1, 1), datetime(2010, 12, 31))
    district = random.choices([d[0] for d in districts], weights=[d[1] for d in districts])[0]

    person_records.append({
        "person_id": pid,
        "first_name": first,
        "last_name": last,
        "gender": gender,
        "birth_date": str(birth.date()),
        "district": district,
        "province": "‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå"
    })

    # ‚úÖ generate health info
    height = round(random.uniform(150, 180), 1)
    weight = round(random.uniform(45, 90), 1)
    bmi = round(weight / ((height / 100) ** 2), 1)
    systolic = random.randint(100, 140)
    diastolic = random.randint(60, 90)
    blood_type = random.choice(["A", "B", "AB", "O"])
    cholesterol = random.randint(150, 250)
    sugar = random.randint(70, 160)
    exercise = random.randint(0, 7)
    smoke = random.choices([0, 1], weights=[0.85, 0.15])[0]
    alcohol = random.choices([0, 1], weights=[0.7, 0.3])[0]
    check_date = random_date(datetime(2024, 1, 1), datetime(2025, 12, 31))

    health_records.append({
        "check_id": 500000 + i,
        "person_id": pid,
        "height_cm": height,
        "weight_kg": weight,
        "bmi": bmi,
        "systolic": systolic,
        "diastolic": diastolic,
        "blood_type": blood_type,
        "cholesterol": cholesterol,
        "blood_sugar": sugar,
        "exercise_freq": exercise,
        "smoking": smoke,
        "alcohol": alcohol,
        "check_date": str(check_date.date())
    })

    # ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    if i % BATCH_SIZE == 0 or i == NUM_PEOPLE:
        part = i // BATCH_SIZE
        person_path = f"output_json/person_part_{part}.json"
        health_path = f"output_json/health_part_{part}.json"

        with open(person_path, "w", encoding="utf-8") as f:
            json.dump(person_records, f, ensure_ascii=False, indent=2)

        with open(health_path, "w", encoding="utf-8") as f:
            json.dump(health_records, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ Saved batch {part} ({i:,} records)")

        person_records.clear()
        health_records.clear()
        fake = Faker("th_TH")  # reset Faker protect memory leak

print("üéâ Done! Generated 100,000 mock records in JSON format.")